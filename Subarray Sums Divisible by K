Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]


Code:
class Solution {
    public int subarraysDivByK(int[] nums, int k){
        int n = nums.length;
        HashMap <Integer,Integer> hm = new HashMap<>();
        hm.put(0,1); // as 0 (which is the initial sum value), 0%k will always be 0 so we put frequency of 0 as 1.
        int ans = 0;
        int sum = 0;
        for(int i = 0; i < n; i++){
            sum = sum + nums[i]; //sum of subsets
            int remainder = sum % k; 
            if(remainder < 0){ //we won't consider negative remainders as due to them in dry run 1 positive remainder won't get counted.So we convert it in it's 
                remainder += k;
            }
            if(hm.containsKey(remainder)){
                ans = ans + hm.get(remainder);
                hm.put(remainder,hm.get(remainder)+1);
            }
            else{
                hm.put(remainder,1);
            }
        }
        return ans;
//same logic as if one subset % k gives a remainder and another subset gives the same remainder, then the subset between them is divisible by k.
        
  }
}
